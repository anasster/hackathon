{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Panos\\\\Documents\\\\Programs\\\\my-app\\\\src\\\\DigitalIdentityApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tesseract from \"tesseract.js\";\nimport { ethers } from \"ethers\";\nimport Button from \"./components/ui/Button\";\nimport Card from \"./components/ui/Card\";\nimport CardContent from \"./components/ui/CardContent\";\nimport Input from \"./components/ui/Input\";\nimport Navbar from \"./components/ui/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\nconst CONTRACT_ABI = [\n  // Add ABI JSON from Remix after deployment\n];\nconst DigitalIdentityApp = () => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [reputation, setReputation] = useState(0);\n  const [userData, setUserData] = useState({});\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  useEffect(() => {\n    const connectKeplr = async () => {\n      if (window.keplr) {\n        try {\n          await window.keplr.enable(\"nillion-chain-testnet-1\");\n          const offlineSigner = window.keplr.getOfflineSigner(\"nillion-chain-testnet-1\");\n          const accounts = await offlineSigner.getAccounts();\n          setWalletAddress(accounts[0].address);\n        } catch (error) {\n          console.error(\"Failed to connect Keplr:\", error);\n        }\n      } else {\n        alert(\"Please install Keplr Wallet!\");\n      }\n    };\n    connectKeplr();\n  }, []);\n  const fetchReputation = async () => {\n    if (!walletAddress) return;\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\n    const reputationScore = await contract.getReputation(walletAddress);\n    setReputation(reputationScore.toNumber());\n  };\n  const extractTextFromImage = async file => {\n    setIsProcessing(true);\n    try {\n      const result = await Tesseract.recognize(file, \"eng+ell\");\n      const extractedText = result.data.text;\n      parseExtractedText(extractedText);\n    } catch (error) {\n      console.error(\"Error extracting text:\", error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const parseExtractedText = text => {\n    const lines = text.split(\"\\n\");\n    setUserData({\n      name: lines[0] || \"\",\n      idNumber: lines[1] || \"\"\n    });\n  };\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setUploadedImage(file);\n    }\n  };\n  const handleGenerateIdentity = async () => {\n    if (!walletAddress) {\n      alert(\"Connect your wallet first!\");\n      return;\n    }\n    if (!userData.name) {\n      alert(\"Extract identity details first!\");\n      return;\n    }\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n    try {\n      const tx = await contract.increaseReputation(walletAddress, 10);\n      await tx.wait();\n      fetchReputation();\n    } catch (error) {\n      console.error(\"Error updating reputation:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      walletAddress: walletAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload Identity Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleImageUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => extractTextFromImage(uploadedImage),\n          children: \"Post My Identifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Blockchain Digital Identity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"name\",\n          value: userData.name,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"idNumber\",\n          value: userData.idNumber,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleGenerateIdentity,\n          children: \"Generate Identity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(DigitalIdentityApp, \"3h+wz0BSP0MHmsyuijm9z4ZAcBQ=\");\n_c = DigitalIdentityApp;\nexport default DigitalIdentityApp;\nvar _c;\n$RefreshReg$(_c, \"DigitalIdentityApp\");","map":{"version":3,"names":["React","useState","useEffect","Tesseract","ethers","Button","Card","CardContent","Input","Navbar","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","DigitalIdentityApp","_s","walletAddress","setWalletAddress","reputation","setReputation","userData","setUserData","uploadedImage","setUploadedImage","isProcessing","setIsProcessing","connectKeplr","window","keplr","enable","offlineSigner","getOfflineSigner","accounts","getAccounts","address","error","console","alert","fetchReputation","provider","providers","Web3Provider","ethereum","contract","Contract","reputationScore","getReputation","toNumber","extractTextFromImage","file","result","recognize","extractedText","data","text","parseExtractedText","lines","split","name","idNumber","handleImageUpload","e","target","files","handleGenerateIdentity","signer","getSigner","tx","increaseReputation","wait","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","value","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/Panos/Documents/Programs/my-app/src/DigitalIdentityApp.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tesseract from \"tesseract.js\";\r\nimport { ethers } from \"ethers\";\r\nimport Button from \"./components/ui/Button\";\r\nimport Card from \"./components/ui/Card\";\r\nimport CardContent from \"./components/ui/CardContent\";\r\nimport Input from \"./components/ui/Input\";\r\nimport Navbar from \"./components/ui/NavBar\";\r\n\r\nconst CONTRACT_ADDRESS = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\r\nconst CONTRACT_ABI = [\r\n  // Add ABI JSON from Remix after deployment\r\n];\r\n\r\nconst DigitalIdentityApp = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [reputation, setReputation] = useState(0);\r\n  const [userData, setUserData] = useState({});\r\n  const [uploadedImage, setUploadedImage] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const connectKeplr = async () => {\r\n      if (window.keplr) {\r\n        try {\r\n          await window.keplr.enable(\"nillion-chain-testnet-1\");\r\n          const offlineSigner = window.keplr.getOfflineSigner(\"nillion-chain-testnet-1\");\r\n          const accounts = await offlineSigner.getAccounts();\r\n          setWalletAddress(accounts[0].address);\r\n        } catch (error) {\r\n          console.error(\"Failed to connect Keplr:\", error);\r\n        }\r\n      } else {\r\n        alert(\"Please install Keplr Wallet!\");\r\n      }\r\n    };\r\n    connectKeplr();\r\n  }, []);\r\n\r\n  const fetchReputation = async () => {\r\n    if (!walletAddress) return;\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);\r\n    const reputationScore = await contract.getReputation(walletAddress);\r\n    setReputation(reputationScore.toNumber());\r\n  };\r\n\r\n  const extractTextFromImage = async (file) => {\r\n    setIsProcessing(true);\r\n    try {\r\n      const result = await Tesseract.recognize(file, \"eng+ell\");\r\n      const extractedText = result.data.text;\r\n      parseExtractedText(extractedText);\r\n    } catch (error) {\r\n      console.error(\"Error extracting text:\", error);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const parseExtractedText = (text) => {\r\n    const lines = text.split(\"\\n\");\r\n    setUserData({\r\n      name: lines[0] || \"\",\r\n      idNumber: lines[1] || \"\",\r\n    });\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setUploadedImage(file);\r\n    }\r\n  };\r\n\r\n  const handleGenerateIdentity = async () => {\r\n    if (!walletAddress) {\r\n      alert(\"Connect your wallet first!\");\r\n      return;\r\n    }\r\n    if (!userData.name) {\r\n      alert(\"Extract identity details first!\");\r\n      return;\r\n    }\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n    try {\r\n      const tx = await contract.increaseReputation(walletAddress, 10);\r\n      await tx.wait();\r\n      fetchReputation();\r\n    } catch (error) {\r\n      console.error(\"Error updating reputation:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar walletAddress={walletAddress} />\r\n      <Card>\r\n        <CardContent>\r\n          <h2>Upload Identity Image</h2>\r\n          <input type=\"file\" onChange={handleImageUpload} />\r\n          <Button onClick={() => extractTextFromImage(uploadedImage)}>Post My Identifier</Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardContent>\r\n          <h2>Blockchain Digital Identity</h2>\r\n          <Input name=\"name\" value={userData.name} readOnly />\r\n          <Input name=\"idNumber\" value={userData.idNumber} readOnly />\r\n          <Button onClick={handleGenerateIdentity}>Generate Identity</Button>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DigitalIdentityApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}